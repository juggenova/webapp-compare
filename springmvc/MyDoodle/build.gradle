buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'net.yadaframework:yadatools:0.7.7.R4'
    }
}

plugins {
    id 'application' // for the "run" task
	id 'org.hidetake.ssh' version '2.10.1'
	id 'com.meiuwa.gradle.sass' version "1.0.0"	// Only when using SASS !!! v2.0.0 may not work
	id("com.github.node-gradle.node") version "3.5.1"
}

ext.acronym = 'wcp'

apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'net.yadaframework.tools'
apply plugin: 'org.hidetake.ssh'        // https://gradle-ssh-plugin.github.io

if (!project.hasProperty('env')) {
	ext.env="envUnset"
}

// Reading the gradle.local.properties file
def yadaSourceRepoPath = null;
def yadaProjects = null;
Properties localProps = new Properties()
File localPropsFile = file('gradle.local.properties')
if(localPropsFile.exists()) {
    localPropsFile.withInputStream { 
        localProps.load(it) 
    }
    yadaSourceRepoPath = localProps.getProperty('yadaSourceRepoPath')
    yadaProjects = localProps.getProperty('yadaProjects')
}

def YadaWebLib = "$yadaSourceRepoPath/YadaWeb";
def YadaWebSecurityLib = "$yadaSourceRepoPath/YadaWebSecurity";
def YadaWebCmsLib = "$yadaSourceRepoPath/YadaWebCMS";
def webAppDir = "$projectDir/src/main/webapp"
def acroenv = "${acronym}${env}"
def startTime = new Date()
def timestamp = startTime.format('yyyyMMdd@HHmm')
def warName = "${acronym}.${timestamp}.war"
def warPath = "${buildDir}/libs/$warName"
def config = new ConfigSlurper(env).parse(new File("/srv/wcpdev/bin/deploy.config").toURI().toURL())

//sassCompile {
//    source = project.files(fileTree("src/main/webapp/res/css"), fileTree("$YadaWebLib/src/main/resources/net/yadaframework/views/yada/css"), fileTree("$YadaWebCmsLib/src/main/resources/net/yadaframework/views/yada/css")) 
//    include("**/*.sass", "**/*.scss", "**/*.css")
//    exclude("**/*.min.*", "**/_*.sass", "**/_*.scss")
//    output = file("src/main/webapp/res/css")
//}




java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

eclipse {
    jdt {
	    sourceCompatibility = JavaVersion.VERSION_17
	    targetCompatibility = JavaVersion.VERSION_17
        // https://stackoverflow.com/a/35302104/587641
        file {
                File dir = file('.settings')
                dir.mkdirs()
                File f = file('.settings/org.eclipse.core.resources.prefs')
            if (!f.exists()) {
                    f.write('eclipse.preferences.version=1\n')
                    f.append('encoding/<project>=utf-8')
                }
            }
    }
    wtp {
        component {
        	contextPath = '/'
        }
        // This section edits the file "/.settings/org.eclipse.wst.common.project.facet.core.xml"
        // removing the facet of jst.web version 2.4 and adding version 3.1.
        // One day this will not be needed anymore, but until then...
        facet {
        	facet name: 'jst.web', version: '3.1'
        	def oldJstWebFacet = facets.findAll {
            	it.name == 'jst.web' && it.version == '2.4'
            }
            facets.removeAll(oldJstWebFacet)
        }
    }
	// https://blog.gradle.org/buildship-sync-task-exec
    autoBuildTasks sassCompile // Only when using SASS !!!
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF8'
}

tasks.withType(JavaCompile).configureEach {
    // Needed since Spring 6.1: 
    // https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x#parameter-name-retention
    options.compilerArgs.add("-parameters")
}

repositories {
    mavenCentral()
    // mavenLocal()
}

dependencies {
	if (yadaSourceRepoPath==null) {
		println("Using published jars for Yada");
		implementation 'net.yadaframework:yadaweb:0.7.7.R4'
		implementation 'net.yadaframework:yadawebsecurity:0.7.7.R4'
	}

    // Add here any library that you might need (then run "Refresh Gradle Project")
    
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.19'	
	
    // For embedded mariadb
	implementation('ch.vorburger.mariaDB4j:mariaDB4j:3.+') {
		// mariaDB4j pulls the latest version of spring core but this is never a good thing.
        exclude group: 'org.springframework', module: 'spring-core'
    }
    
    // Needed in Tomcat 8 at runtime
    // runtimeOnly 'commons-beanutils:commons-beanutils:1.9.4'
    // runtimeOnly 'commons-jxpath:commons-jxpath:1.3'

    testImplementation 'junit:junit:4.13.+'
}

if (yadaSourceRepoPath!=null && yadaProjects!=null) {
	println("Using local Yada sources instead of compiled jars");
	def yadaProjectArray = yadaProjects.split(',')
    yadaProjectArray.each { projectName ->
        dependencies {
            implementation project(":${projectName}")
        }
    }
}

sassCompile {
    def inputFiles = []
    
    if (yadaSourceRepoPath == null) {
        // Load CSS files from the classpath (yadaweb jar)
        def jarResources = configurations.compileClasspath.findAll { it.name.contains('yadaweb') }.collect {
            zipTree(it)
        }
        jarResources.each { jar ->
            jar.visit { fileDetails ->
                if (fileDetails.name.endsWith('.css') || fileDetails.name.endsWith('.sass') || fileDetails.name.endsWith('.scss')) {
                    inputFiles.add(fileDetails.file)
                }
            }
        }
        if (inputFiles.isEmpty()) {
            throw new GradleException("No YadaWeb CSS/SASS/SCSS files found in classpath")
        }

        source = project.files(fileTree("src/main/webapp/res/css"),inputFiles)
    } else {
        // Use the directories specified when yadaSourceRepoPath is set
        source = project.files(
            fileTree("src/main/webapp/res/css"), 
            fileTree("$YadaWebLib/src/main/resources/net/yadaframework/views/yada/css"), 
            fileTree("$YadaWebCmsLib/src/main/resources/net/yadaframework/views/yada/css")
        )
    }

    include("**/*.sass", "**/*.scss", "**/*.css")
    exclude("**/*.min.*", "**/_*.sass", "**/_*.scss")

    output = file("src/main/webapp/res/css")
}

run {
    doFirst {
        // Prevents "Conflicting persistence unit definitions for name 'yadaPersistenceUnit'"
        file("bin/main/META-INF/persistence.xml").delete(); 
    }
    dependsOn sassCompile
	// Gradle doesn't pass the system properties over to the process, 
	// so I need to copy them in order to use them with Commons Configuration
	// but I need to exclude the java properties because they might come
	// from a local java 8 installation and generate errors on java 17
	systemProperties System.properties.findAll { key, value -> !key.startsWith('java') }
    args = ['wcpdev', "$webAppDir", ".", "dev"]
    mainClass = 'net.yadaframework.core.YadaTomcatServer'
}

yadaInit {
    projectName = rootProject.name
    acronym = project.acronym
    basePackage = 'net.ghezzi.jugg.wcp'
    dbPasswords = ['dev': 'mydevpwd', 'tst': 'mytstpwd', 'prod': 'myprodpwd']
    envs=['dev', 'col', 'prod']
        // See YadaTools/src/main/groovy/net/yadaframework/tools/YadaProject.groovy
        // for more configuration options
}

configurations {
    generateSchema
}
dependencies {
    generateSchema 'org.apache.logging.log4j:log4j-core:2.21.1'
}

task dbSchema(dependsOn: [classes], type: JavaExec) {
	inputs.files (configurations.generateSchema, "$rootDir/src/main/resources/META-INF/persistence.xml") 
	outputs.files "$rootDir/schema/${acronym}.sql" // This must be the same name used in persistence.xml
    classpath = configurations.generateSchema + sourceSets.main.runtimeClasspath
    main = 'net.yadaframework.tools.YadaSchemaGenerator'
    doFirst {
        delete outputs.files
		// Since recently, for autodiscovery of entities to work, 
		// the compiled entities must be in the root folder of the META-INF/persistence.xml file
		// so I copy the META-INF file there:
        copy {
     		from 'src/main/resources/META-INF'
    		into 'build/classes/java/main/META-INF'
        }
    }
    doLast {
        delete "build/classes/java/main/META-INF"
    }
}

sass {
	properties = "$rootDir/sass.properties"
    download {
		version = "1.58.2"
		output = "$rootDir/.sass"
    }
}

/////////////////////////////////////////////////////////////////////////////////////////
// Deploy
/////////////////////////////////////////////////////////////////////////////////////////
import groovy.swing.SwingBuilder

// ssh plugin
remotes {
	deployHost {
		host = config.server.host
		user = config.server.user
		identity = config.server.identity
		knownHosts = addHostKey(file("known_hosts"))
		jschLog=true
	}
}

ssh.settings {
	jschLog = true
}

println "acronym=${acronym}"
println "env=${env}"
println "acroenv=${acroenv}"
println "targetHost=${config.server.host}"
println ""

/**
 * Opens a confirmation dialog
 * @param prompt
 * @return
 */
def confirm(String prompt) {
	// Adapted from https://www.timroes.de/2014/01/19/using-password-prompts-with-gradle-build-files/
	def yn = ''
	new SwingBuilder().edt {
	  dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
		  title: "Confirmation", // Dialog title
		  alwaysOnTop: true, // pretty much what the name says
		  resizable: false, // Don't allow the user to resize the dialog
		  locationRelativeTo: null, // Place dialog in center of the screen
		  pack: true, // We need to pack the dialog (so it will take the size of it's children
		  show: true // Let's show it
	  ) {
		vbox { // Put everything below each other
		  label(text: prompt + " (y/N)")
		  input = textField()
		  button(defaultButton: true, text: 'OK', actionPerformed: {
			yn = input.text; // Set pass variable to value of input field
			dispose(); // Close dialog
		  })
		}
	  }
	}
	// def yn = System.console().readLine(prompt + " (y/N)");
	return yn=="y";
}

task incrementBuild(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'net.yadaframework.tools.AntIncrementBuild'
	args "$webAppDir/WEB-INF/build.properties"
}

// destinazione dei js applicativi minimizzati 
def appJsOutputFolder = file("$webAppDir/res/js/")

task compressYadaJs(type: NpxTask) {
    dependsOn npmInstall
	def inputFiles = []
    if (yadaSourceRepoPath == null) {
	    def jarResources = configurations.compileClasspath.findAll { it.name.contains('yadaweb') }.collect {
	        zipTree(it)
	    }
	    jarResources.each { jar ->
	        jar.visit { fileDetails ->
	            if (fileDetails.name.endsWith('.js') && fileDetails.name.startsWith('yada')) {
	                inputFiles.add(fileDetails.file)
	            }
	        }
	    }
	    inputs.files(inputFiles)
	    args.addAll(inputFiles.collect { it.getPath() })
		if (inputFiles.isEmpty()) {
        	throw new GradleException("No yada*.js files found in classpath")
    	}
	} else { 
        def inputFolder = "$YadaWebLib/src/main/resources/net/yadaframework/views/yada/js"
	    inputs.dir(inputFolder)
        inputFiles = fileTree(dir: inputFolder, include: '**/yada*.js')
        inputs.files(inputFiles.files)
        args.addAll(inputFiles.files.collect { it.getPath() })
    }

    def outputFile = file("${appJsOutputFolder}/yada.min.js")

    command = 'terser'
    args = [
        '--compress',
        '--source-map',
        '--output',
        "${outputFile}",
        "--"
    ]

    // Define inputs and outputs for incremental builds
    outputs.file(outputFile)
}


task compressAppJs(type: NpxTask) {
	dependsOn compressYadaJs 
	def inputFolder = "$webAppDir/res/js";
    def inputFiles = fileTree(dir: inputFolder, include: '**/*.js', exclude: ['*.min.*', '**/yada*.js'])
    def outputFile = file("${appJsOutputFolder}/${acronym}.min.js")
	command = 'terser'
    args = [ // "${inputFiles}",        
    	'--compress',
        '--source-map',
        '--output',
 		"${outputFile}"  ,
 		"--"
 	]
 	args.addAll(inputFiles.files.collect { it.getPath() })
 	inputs.files(inputFiles)
 	inputs.dir(inputFolder)
    outputs.file(outputFile)
}

/**
 * Pulisce i js applicativi dopo la minificazione e la creazione del war
 */
task appJsOutputClean() {
	doLast {
		delete fileTree(dir: appJsOutputFolder, include: ['**/*.min.js', '**/*.min.js.map', '**/*.sourcemap.json'])
	}
}

task makeWar(dependsOn: [classes, compressAppJs], type: War) {
	archiveFileName=warName
	from webAppDir
	exclude('**/*.scss')
	exclude('**/persistence.xml')
	exclude('META-INF/persistence.xml')
	if (env=='col' || env=='prod') {
		exclude('META-INF/context.xml')
		processResources {
			exclude('**/conf.webapp.dev.xml')
			exclude('**/logback.xml')
			exclude('META-INF/persistence.xml')
		}
		from("/env/${env}/logback.xml"){
			into "WEB-INF/classes"
		}
		from("/env/${env}/context.xml") {
			into "META-INF"
		}
		from("/env/${env}/robots.txt")
	}
	if (env=='col') {
		from("/env/col/conf.webapp.col.xml") {
			into "WEB-INF/classes"
		}
	}
    doLast {
        println "WAR generated at ${archiveFile.get().asFile.absolutePath}"
    }	
}

// This removes minified js files so we don't commit them
// Disabled because sometimes the yada.min.js file is not created (?!)
// makeWar.finalizedBy appJsOutputClean
// appJsOutputClean.mustRunAfter(makeWar)

task deployWar(dependsOn: [incrementBuild, makeWar]) {
	doLast {
		if ((env!='prod') || confirm("Overwrite existing application on ${env}?")) {
			println "Sending files to ${env}..."
			ssh.run {
				session(remotes.deployHost) {
					put from: warPath, into: "/srv/${acroenv}/deploy/$warName"
				}
			}
			println "Running deploy script..."
			ssh.run {
				session(remotes.deployHost) {
					execute """/srv/${acroenv}/bin/deploy.sh /srv/${acroenv}/deploy/${warName}"""
				}
			}
			delete warPath
			println "Deploy of ${warName} done."
		} else {
			println "Aborted."
		}
	}
}

jar {
	// This prevents "copy task failes because no duplicate handling strategy has been set" error on persistence.xml that is found in multiple places
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
